@page "/"

<h1>BlazorSortable Demo</h1>

<a href="/page1">Go to Page1</a>

<div class="lists-group">
    <h2>Sort</h2>
    <div class="lists-row">
        <div class="list-column">
            <h3>List 1</h3>
            <SortableList Items="GenerateItem1List(3)"
                          Group="group1"
                          Class="sortable-list"
                          Style="background-color: silver;"
                          Handle=".my-handle">
                <Item1Component Item="context" />
            </SortableList>
        </div>
        <div class="list-column">
            <h3>List 2</h3>
            <SortableList Items="GenerateItem1List(3, 4)"
                          Group="group1"
                          OnAdd="OnAddItem1"
                          OnUpdate="OnUpdateItem1"
                          OnRemove="OnRemoveItem1"
                          Class="sortable-list"
                          Style="background-color: cadetblue;"
                          Handle=".my-handle">
                <Item1Component Item="context" />
            </SortableList>
        </div>
    </div>
</div>

<div class="lists-group">
    <h2>Clone</h2>
    <div class="lists-row">
        <div class="list-column">
            <h3>List 1</h3>
            <SortableList Items="GenerateItem1List(3)"
                          Group="group2"
                          Swap="true"
                          Pull="PullMode.Clone"
                          CloneFunction="@(i => new Item1 { Name = i.Name + "_clone" })"
                          OnCloneException="OnCloneException"
                          Put="PutMode.False"
                          Class="sortable-list">
                <ChildContent Context="context">
                    <Item1Component Item="context" />
                </ChildContent>
            </SortableList>
        </div>
        <div class="list-column">
            <h3>List 2</h3>
            <SortableList Items="GenerateItem1List(3, 4)"
                          Class="sortable-list">
                <Item1Component Item="@context" />
            </SortableList>
        </div>
    </div>
</div>

<div class="lists-group">
    <h2>Convert</h2>
    <div class="lists-row">
        <div class="list-column">
            <h3>List 1</h3>
            <SortableList Items="GenerateItem1List(3)"
                          Id="list1"
                          Group="group3"
                          Put="PutMode.False"
                          Class="sortable-list">
                <Item1Component Item="context" />
            </SortableList>
        </div>
        <div class="list-column">
            <h3>List 2 (missing converter)</h3>
            <SortableList Items="GenerateItem1List(3, 4)"
                          Group="group3"
                          Id="list2"
                          Put="PutMode.False"
                          Class="sortable-list">
                <Item1Component Item="context" />
            </SortableList>
        </div>
        <div class="list-column">
            <h3>List 3</h3>
            <SortableList TItem="Item2"
                          Items="GenerateItem2List(2)"
                          Put="PutMode.Groups"
                          PutGroups="@(["group3"])"
                          ConvertFunction="@ItemConverter1"
                          OnConvertException="OnConvertException"
                          Pull="PullMode.False"
                          Class="sortable-list"
                          Context="item">
                @($"{item.Name}: {item.Value} ({item.Type})")
            </SortableList>
        </div>
    </div>
</div>

<div class="lists-group">
    <h2>Drop zone</h2>
    <div class="lists-row">
        <div class="list-column">
            <h3>List</h3>
            @* <SortableList Items="GenerateItem1List(4)" *@
            @*               Group="Drop" *@
            @*               Pull="PullMode.True" *@
            @*               DragClass="dragt" *@
            @*               Class="sortable-list"> *@
            @*     <Item1Component Item="context" /> *@
            @* </SortableList> *@
            <SortableList Items="@([1, 2, 3])"
                          Group="Drop"
                          Pull="PullMode.True"
                          DragClass="drag"
                          Class="sortable-list">
                @context
            </SortableList>
        </div>
        <div class="list-column">
            <h3>Drop zone</h3>
            <SortableDropZone Class="drop-zone"
                              GhostClass="ghost-red"
                              Put="PutMode.Function"
                              PutFunction="@OnPut"
                              OnDrop="@OnDrop" />
        </div>
    </div>
</div>

@code {
    private List<Item1> GenerateItem1List(int count, int startNumber = 1)
    {
        List<Item1> list = [];
        for (int i = 0; i < count; i++)
            list.Add(new Item1 { Name = $"Item {startNumber++}" });
        return list;
    }

    private List<Item2> GenerateItem2List(int count, int startNumber = 1)
    {
        List<Item2> list = [];
        for (int i = 0; i < count; i++)
            list.Add(new Item2 { Name = $"Item {startNumber++}" });
        return list;
    }

    private Item2? ItemConverter1(object item, ISortableListInfo info)
    {
        switch (item)
        {
            case Item1 item1:
                switch (info.Id)
                {
                    case "list1":
                        return new Item2
                        {
                            Name = item1.Name + " from list1",
                            Value = 100
                        };
                    case "list2_":
                        return new Item2
                        {
                            Name = item1.Name + " from list2",
                            Value = 50
                        };
                }
                break;

            case Item2 item2:
                return item2;
        }
        return null;
    }

    private void OnAddItem1(SortableEventArgs<Item1> args)
    {

    }

    private void OnUpdateItem1(SortableEventArgs<Item1> args)
    {

    }

    private void OnRemoveItem1(SortableEventArgs<Item1> args)
    {

    }

    private void OnDrop(SortableEventArgs<object> args)
    {

    }

    private void OnCloneException(Exception ex)
    {

    }

    private void OnConvertException(Exception ex)
    {

    }

    private bool OnPut(object item, ISortableListInfo sourceSortable)
    {
        return sourceSortable.Group == "Drop";
    }
}
