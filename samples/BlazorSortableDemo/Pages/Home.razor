@* TODO: Make a normal demo with GitHub Pages *@

@page "/"

<h1>BlazorSortableDemo</h1>

<a href="/page1">Go to Page1</a>

<div class="lists-group">
    <h2>Sort</h2>
    <div class="lists-row">
        <div class="list-column">
            <h3>List 1</h3>
            <Sortable Items="GenerateItem1List(3)"
                      Group="group1"
                      Class="sortable-list"
                      Style="background-color: silver;"
                      Handle=".my-handle">
                <Item1Component Item="context" />
            </Sortable>
        </div>
        <div class="list-column">
            <h3>List 2</h3>
            <Sortable Items="GenerateItem1List(3, 4)"
                      Group="group1"
                      OnAdd="OnAddItem1"
                      OnUpdate="OnUpdateItem1"
                      OnRemove="OnRemoveItem1"
                      Class="sortable-list"
                      Style="background-color: cadetblue;"
                      Handle=".my-handle">
                <Item1Component Item="context" />
            </Sortable>
        </div>
    </div>
</div>

<div class="lists-group">
    <h2>Clone</h2>
    <div class="lists-row">
        <div class="list-column">
            <h3>List 1</h3>
            <Sortable Items="GenerateItem1List(3)"
                      Group="group2"
                      Pull="SortablePullMode.Clone"
                      CloneFunction="@(i => new Item1 { Name = i.Name + "_clone" })"
                      Put="SortablePutMode.False"
                      Class="sortable-list"
                      Context="item">
                <Item1Component Item="item" />
            </Sortable>
        </div>
        <div class="list-column">
            <h3>List 2</h3>
            <Sortable Items="GenerateItem1List(3, 4)"
                      Group="group2"
                      Class="sortable-list">
                <Item1Component Item="context" />
            </Sortable>
        </div>
    </div>
</div>

<div class="lists-group">
    <h2>Convert</h2>
    <div class="lists-row">
        <div class="list-column">
            <h3>List 1</h3>
            <Sortable Items="GenerateItem1List(3)"
                      Id="list1"
                      Group="group3"
                      Put="SortablePutMode.False"
                      Class="sortable-list">
                <Item1Component Item="context" />
            </Sortable>
        </div>
        <div class="list-column">
            <h3>List 2</h3>
            <Sortable Items="GenerateItem1List(3, 4)"
                      Group="group3"
                      Id="list2"
                      Put="SortablePutMode.False"
                      Class="sortable-list">
                <Item1Component Item="context" />
            </Sortable>
        </div>
        <div class="list-column">
            <h3>List 3</h3>
            <Sortable TItem="Item2"
                      Items="GenerateItem2List(2)"
                      Put="SortablePutMode.Groups"
                      PutGroups="@(["group3"])"
                      ConvertFunction="ItemConverter1"
                      Pull="SortablePullMode.False"
                      Class="sortable-list"
                      Context="item">
                @($"{item.Name}: {item.Value} ({item.Type})")
            </Sortable>
        </div>
    </div>
</div>

<div class="lists-group">
    <h2>Drop zone</h2>
    <div class="lists-row">
        <div class="list-column">
            <h3>List</h3>
            <Sortable Items="@([1, 2, 3])"
                      Group="drop"
                      Pull="SortablePullMode.Function"
                      PullFunction="OnPull"
                      DragClass="drag"
                      Class="sortable-list">
                @context
            </Sortable>
        </div>
        <div class="list-column">
            <h3>Drop zone</h3>
            <Sortable TItem="object"
                      Class="drop-zone"
                      GhostClass="ghost-red"
                      Put="SortablePutMode.Function"
                      PutFunction="OnPut" />
        </div>
    </div>
</div>

@code {
    private List<Item1> GenerateItem1List(int count, int startNumber = 1)
    {
        List<Item1> list = [];
        for (int i = 0; i < count; i++)
            list.Add(new Item1 { Name = $"Item {startNumber++}" });
        return list;
    }

    private List<Item2> GenerateItem2List(int count, int startNumber = 1)
    {
        List<Item2> list = [];
        for (int i = 0; i < count; i++)
            list.Add(new Item2 { Name = $"Item {startNumber++}" });
        return list;
    }

    private Item2? ItemConverter1(SortableTransferContext<object> ctx)
    {
        switch (ctx.Item)
        {
            case Item1 item1:
                switch (ctx.From.Id)
                {
                    case "list1":
                        return new Item2
                        {
                            Name = item1.Name + " from list1",
                            Value = 100
                        };
                    case "list2":
                        return new Item2
                        {
                            Name = item1.Name + " from list2",
                            Value = 50
                        };
                }
                break;

            case Item2 item2:
                return item2;
        }
        return null;
    }

    private void OnUpdateItem1(SortableEventArgs<Item1> args)
    {

    }

    private void OnAddItem1(SortableEventArgs<Item1> args)
    {

    }

    private void OnRemoveItem1(SortableEventArgs<Item1> args)
    {

    }

    private bool OnPull(SortableTransferContext<int> ctx)
    {
        return true;
    }

    private bool OnPut(SortableTransferContext<object> ctx)
    {
        return ctx.From.Group == "drop";
    }
}
